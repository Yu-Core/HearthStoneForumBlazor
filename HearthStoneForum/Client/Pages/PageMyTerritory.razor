@page "/myTerritory"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IPopupService PopupService
@inject IAuthService AuthService
@inject NavigationManager navigation
@inject HttpClient Http
@inject MainLayoutState LayoutState

<div class="main">
    <div class="territory-wrap">
        <div class="territory-top">
            <div class="user-portrait">
                <MButton Class="w-100 h-100" Icon OnClick="() => _showPortraitSelect = true">
                    <MAvatar Color="primary" Class="w-100 h-100">
                        <SharedPortrait Src="@(UserInfo.Portrait)"
                                        Text="@(UserInfo.Name)">
                        </SharedPortrait>
                    </MAvatar>
                </MButton>
                <PModal @bind-Value="_showPortraitSelect"
                        Title="选择头像"
                        Class="w-75 h-75"
                        OnSave="() => SaveEditPortrait()"
                        OnCancel="() => CancelEditPortrait()">
                    <div class="select-portrait-list">
                        @foreach (var item in Portraits)
                        {
                            <div class="select-portrait-item-wrap">
                                <div class="select-portrait-item">
                                    <MHover>
                                        <MButton @attributes="context.Attrs"
                                             Class=@($"{context.Class} w-100 h-100 {((context.Hover||SelectPortraitUrl == item.UrlPath) ?"border border-3 border-primary":"")}")
                                             Style="transition:all 0.1s;"
                                             Icon
                                             OnClick="()=>SelectPortraitUrl = item.UrlPath">
                                            <MAvatar Class="w-100 h-100">
                                                <MImage Src="@(item.UrlPath)"></MImage>
                                            </MAvatar>
                                        </MButton>
                                    </MHover>

                                </div>
                            </div>
                        }
                    </div>
                </PModal>
            </div>
            <div class="user-info">
                <div class="user-name">
                    <h4><strong>@(UserInfo.Name.GetCutOutByLength(10))</strong></h4>
                </div>
                <div class="user-editor">
                    <MButton Rounded
                             Outlined
                             Color="indigo"
                             OnClick="()=> _showUserInfoEdit = true">
                        <MIcon>mdi-square-edit-outline</MIcon>
                        编辑资料
                    </MButton>
                    <MDialog @bind-Value="_showUserInfoEdit"
                             Fullscreen
                             Transition="dialog-right-transition">
                        <MCard>
                            <MForm EnableValidation Model="UserInfoDTOEdit" OnValidSubmit="HandleOnValidSubmit">

                                <MToolbar Dark
                                          Color="primary">
                                    <MButton Icon
                                             Dark
                                             OnClick="() => _showUserInfoEdit = false">
                                        <MIcon>mdi-close</MIcon>
                                    </MButton>
                                    <MToolbarTitle>修改资料</MToolbarTitle>
                                    <MSpacer></MSpacer>
                                    <MToolbarItems>
                                        <MButton Dark
                                                 Text
                                                 Type="submit">
                                            保存
                                        </MButton>
                                    </MToolbarItems>
                                </MToolbar>
                                <div class="d-flex justify-content-center">
                                    <div class="w-100" style="max-width:800px;">
                                        <MList ThreeLine
                                               Subheader>
                                            <MSubheader>用户信息</MSubheader>
                                            <MListItem>
                                                <span class="me-3">名字</span>
                                                <MTextField @bind-Value="UserInfoDTOEdit.Name"
                                                            Placeholder="请输入你的名字"
                                                            Dense
                                                            Outlined
                                                            HideDetails="@("auto")" />
                                            </MListItem>
                                            <MListItem>
                                                <span class="me-3">性别</span>
                                                <MRadioGroup @bind-Value="UserInfoDTOEdit.Sex"
                                                             Dense
                                                             Class="mt-0"
                                                             Row
                                                             HideDetails="@("auto")">
                                                    <MRadio Label="@(Sex.未知.ToString())" Value="@(Sex.未知)"></MRadio>
                                                    <MRadio Label="@(Sex.男.ToString())" Value="@(Sex.男)"></MRadio>
                                                    <MRadio Label="@(Sex.女.ToString())" Value="@(Sex.女)"></MRadio>
                                                </MRadioGroup>
                                            </MListItem>
                                        </MList>

                                        <MDivider></MDivider>

                                        <MList ThreeLine
                                               Subheader>
                                            <MSubheader>联系方式</MSubheader>
                                            <MListItem>
                                                <span class="me-3">邮箱</span>
                                                <MTextField @bind-Value="UserInfoDTOEdit.Email"
                                                            Placeholder="请输入你的电子邮箱"
                                                            Dense
                                                            Outlined
                                                            HideDetails="@("auto")" />
                                            </MListItem>
                                            <MListItem>
                                                <span class="me-3">手机</span>

                                                <MTextField @bind-Value="UserInfoDTOEdit.Phone"
                                                            Placeholder="请输入你的手机号码"
                                                            Dense
                                                            Outlined
                                                            HideDetails="@("auto")" />
                                            </MListItem>
                                        </MList>
                                    </div>
                                </div>
                            </MForm>
                        </MCard>
                    </MDialog>
                </div>
            </div>

        </div>
        <div class="territory-middle">
            <MTabs @bind-Value="tabs"
                   BackgroundColor="#f7f8f9">
                <MTab>帖子</MTab>
                <MTab>喜欢</MTab>
                <MTab>收藏</MTab>
                <MTab>浏览历史</MTab>
            </MTabs>
        </div>
        <div class="territory-bottom">
            <MTabsItems Value="tabs">
                <MTabItem>
                    <MyTerritoryTabItem GetUrl="@($"invitations/user?id={id}&")"></MyTerritoryTabItem>
                </MTabItem>
                <MTabItem>
                    <MyTerritoryTabItem GetUrl="@($"invitations/like?id={id}&")"></MyTerritoryTabItem>
                </MTabItem>
                <MTabItem>
                    <MyTerritoryTabItem GetUrl="@($"invitations/collection?id={id}&")"></MyTerritoryTabItem>
                </MTabItem>
                <MTabItem>
                    <MyTerritoryTabItem GetUrl="@($"invitations/viewRecord?id={id}&")"></MyTerritoryTabItem>
                </MTabItem>
            </MTabsItems>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int id { get; set; }


    StringNumber tabs;

    private bool _showPortraitSelect { get; set; }

    private bool _showUserInfoEdit { get; set; }

    private string? SelectPortraitUrl { get; set; } = string.Empty;

    private string? Sreach { get; set; }

    private UserInfoDTOView UserInfo { get; set; } = new();

    private UserInfoDTOEdit UserInfoDTOEdit { get; set; } = new();

    private List<Portrait> Portraits { get; set; } = new();

    //设置参数的生命周期位于初始化之前,解决了MyTerritoryTabItem组件的参数在初始化之前就加载的问题
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var newParam = new Dictionary<string, object>();


        try
        {
            var IsAuthenticated = await AuthService.IsAuthenticated();
            if (!IsAuthenticated)
            {
                navigation.NavigateTo("404");
            }
            else
            {
                var user = await AuthService.GetUser();
                int userId = Convert.ToInt32(user.FindFirst("userId").Value);
                newParam.Add("id", userId);
            }
        }
        catch (Exception)
        {

            navigation.NavigateTo("404");
            throw;
        }
        await base.SetParametersAsync(ParameterView.FromDictionary(newParam));
    }

    protected override async Task OnInitializedAsync()
    {
        await SetUserInfo();

        await SetPortraits();

        SetUserInfoDTOEdit();
    }
    private async Task SetUserInfo()
    {
        try
        {
            var jso = new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                };
            jso.Converters.Add(new JsonStringEnumConverter());

            var result = await Http.GetFromJsonAsync<ApiResult<UserInfoDTOView>>($"userInfos/{id}", jso);
            UserInfo = result.Data ?? new();
        }
        catch (Exception)
        {
            navigation.NavigateTo("404");
            throw;
        }
    }
    private async Task SetPortraits()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<Portrait>>>("portraits");
            Portraits = result.Data ?? new();
        }
        catch (Exception)
        {

            navigation.NavigateTo("404");
            throw;
        }
    }
    private void SetUserInfoDTOEdit()
    {
        UserInfoDTOEdit = new()
            {
                Id = UserInfo.Id,
                Name = UserInfo.Name,
                Email = UserInfo.Email,
                Phone = UserInfo.Phone,
                Portrait = UserInfo.Portrait,
                Sex = UserInfo.Sex
            };
    }
    private async Task SaveEditPortrait()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SelectPortraitUrl)) return;

            UserInfoDTOEdit.Portrait = SelectPortraitUrl;
            var result = await Http.PutAsJsonAsync($"userInfos/{UserInfoDTOEdit.Id}", UserInfoDTOEdit);
            var data = await result.Content.ReadFromJsonAsync<ApiResult<UserInfoDTOEdit>>();
            if (data.Successful)
            {
                UserInfo.Portrait = UserInfoDTOEdit.Portrait;
                LayoutState.UserInfoSimple.PortraitUrl = UserInfoDTOEdit.Portrait;
                await PopupService.AlertAsync("修改成功");
            }
            else
            {
                await PopupService.AlertAsync($"修改失败({data.Msg})", AlertTypes.Error);
            }
        }
        catch (Exception e)
        {

            await PopupService.AlertAsync($"修改失败({e.Message})", AlertTypes.Error);
            throw;
        }
        finally
        {
            SelectPortraitUrl = string.Empty;
            _showPortraitSelect = false;
            StateHasChanged();
        }
    }
    private void CancelEditPortrait()
    {
        SelectPortraitUrl = string.Empty;
        _showPortraitSelect = false;
    }

    private async Task HandleOnValidSubmit()
    {
        try
        {
            var result = await Http.PutAsJsonAsync($"userInfos/{UserInfoDTOEdit.Id}", UserInfoDTOEdit);
            var data = await result.Content.ReadFromJsonAsync<ApiResult<UserInfoDTOEdit>>();
            if (data.Successful)
            {
                UserInfo.Name = UserInfoDTOEdit.Name;
                LayoutState.UserInfoSimple.Name = UserInfoDTOEdit.Name;
                await PopupService.AlertAsync("修改成功");
            }
            else
            {
                await PopupService.AlertAsync($"修改失败({data.Msg})", AlertTypes.Error);
            }
        }
        catch (Exception e)
        {
            await PopupService.AlertAsync($"修改失败({e.Message})", AlertTypes.Error);

            throw;
        }
        finally
        {
            _showUserInfoEdit = false;
            StateHasChanged();
        }

    }
}
