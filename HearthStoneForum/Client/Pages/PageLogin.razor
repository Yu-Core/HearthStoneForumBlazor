@page "/login"
@layout BlankLayout
@inject IJSRuntime JS
@inject ILocalStorageService localStorageService
@inject NavigationManager navigation
@inject IAuthService AuthService
@inject IPopupService PopupService
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations
@using FluentValidation;

<div class="main">
    <div class="login-video">
        <video autoplay="autoplay" loop="loop" muted="muted">
            <source src="video/LichKing.mp4" type="video/mp4" />
        </video>
    </div>
    <div class="login-card">
        <MForm EnableValidation Model="_model" @ref="_form" OnValidSubmit="HandleOnValidSubmit">
            <div class="login-logo">
                <img src="images/logo_lushichuanshuo.png" />
            </div>
            <div class="login-username">
                <MTextField Solo
                            Dense
                            TValue="string"
                            Clearable
                            Placeholder="请输入用户名"
                            @bind-Value="_model.UserName">
                </MTextField>
            </div>
            <div class="login-password">
                <MTextField Solo
                            Dense
                            TValue="string"
                            Clearable
                            Placeholder="请输入密码"
                            @bind-Value="_model.Password"
                            AppendIcon="@(password_show ? "mdi-eye" : "mdi-eye-off")"
                            Type="@(password_show ? "text" : "password")"
                            OnAppendClick="() => password_show = !password_show">
                </MTextField>
            </div>
            <div class="login-CAPTCHA">
                <div class="drag-wrap">
                    <div class="drag-content">
                        <div class="drag-bg"></div>
                        <div class="drag-text">请拖动滑块解锁</div>
                        <div class="drag-btn">&gt;&gt;</div>
                    </div>
                </div>
                <MCheckbox @bind-Value="_model.CAPTCHA" Dense Height="40" Class="mt-0 pt-0 ps-3 mb-2"></MCheckbox>
            </div>
            <div class="login-btn">
                <MButton Color="info" Height="38" Block Type="submit" >登录</MButton>
            </div>
            <div class="login-other">
                <a>
                    <div class="btn">忘记密码？</div>
                </a>
                <a href="/register">
                    <div class="btn">去注册</div>
                </a>
            </div>
        </MForm>

    </div>
    <MOverlay Value="overlay">
        <MProgressCircular indeterminate
                           Size="64"></MProgressCircular>
    </MOverlay>
</div>
@code {
    private IJSObjectReference? module;
    private DotNetObjectReference<PageLogin>? objRef;
    //private bool _valid = true;
    private MForm? _form;
    private Model _model = new();
    private bool password_show = false;
    private bool overlay = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./js/drag.js");
            objRef = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("DragHelp", objRef);
            await module.InvokeVoidAsync("DragStart");
        }
    }


    private class Model : UserInfoDTOLogin
    {
        [RegularExpression("True", ErrorMessage = "请通过滑块验证")]
        public bool CAPTCHA { get; set; } = false;
    }

    //被JS调用的方法，用于改变滑块验证绑定的值
    [JSInvokable]
    public void CAPTCHASuccess()
    {
        _model.CAPTCHA = true;
        _form.ValidateAsync();
    }

    private async void HandleOnValidSubmit()
    {
        overlay = true;

        await Task.Run(async () =>
        {

            UserInfoDTOLogin userInfo = _model;
            var result = await AuthService.Login(userInfo);

            if (result.Successful)
            {
                navigation.NavigateTo("/");
            }
            else
            {
                await PopupService.AlertAsync(result.Msg, AlertTypes.Error);
            }
            overlay = false;
            await InvokeAsync(StateHasChanged);
        });

        
        
    }

    
}
