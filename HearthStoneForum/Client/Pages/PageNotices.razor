@page "/notices"
@inject HttpClient Http
@inject NavigationManager navigation

<div class="main">
    <div class="notice-wrap">
        <div class="breadcrumbs">
            你所在的位置：<MBreadcrumbs>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="">炉石论坛</MBreadcrumbsItem>
                <MBreadcrumbsItem Style="font-size:0.9rem" Disabled>论坛公告</MBreadcrumbsItem>
            </MBreadcrumbs>
        </div>
        <div class="notice-head">
            <h2>论坛公告</h2>
        </div>
        <div class="notice-content">
            @for (var i = 0; i < Notices.Count; i++)
            {
                <a href="@("noticeInfo/"+Notices[i].Id)" class="rounded-lg">
                    <div class="notice-row rounded-lg">
                        <div class="notice-title">
                            @Notices[i].Title
                        </div>
                        <div class="notice-time">
                            @Notices[i].CreatedTime.ToString("d")
                        </div>
                    </div>
                </a>
            }
        </div>
        <div class="text-center">
            <MPagination Class="@(pageLength>1?"":"d-none")" @bind-Value="page" Length="@(pageLength)"></MPagination>
        </div>
    </div>
</div>

@code {
    public List<Notice> Notices{ get; set; } = new();
    private int _page = 1;
    private int page {
        get => _page;
        set{
            _page = value;
            ChangeNotices();
        }
    }
    private int size = 20;
    private int total = 0;
    private int pageLength = 0;
    protected override Task OnInitializedAsync()
    {
        ChangeNotices();
        return base.OnInitializedAsync();
    }
    private async void ChangeNotices()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<Notice>>>($"notices/page?page={page}&size={size}");
            Notices = result.Data ?? new();
            total = result.Total;
            pageLength = total / size;
            if (total % size > 0)
            {
                pageLength++;
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            navigation.NavigateTo("404");
        }
    }
    
}
