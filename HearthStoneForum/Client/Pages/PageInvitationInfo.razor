@page "/invitation/{id:int}"
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IPopupService PopupService


<div class="main">
    <div class="invitation-wrap">
        <div class="breadcrumbs">
            你所在的位置：<MBreadcrumbs>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="">炉石论坛</MBreadcrumbsItem>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="@("invitations/" + Invitation.AreaId.ToString())">@Invitation.AreaName</MBreadcrumbsItem>
                <MBreadcrumbsItem Style="font-size:0.9rem" Disabled>@(Invitation.Title)</MBreadcrumbsItem>
                </MBreadcrumbs>
            </div>
            <div class="invitation-head">
                <h2>@(Invitation.Title)</h2>
        </div>
        <div class="invitation-content">
            <div class="content-left">
                <div class="user-headimg"></div>
                <div class="user-name">@(Invitation.UserName)</div>
            </div>
            <div class="content-right">
                <div class="content-text ">
                    <div class="ql-editor">
                        @((MarkupString)(Invitation.Content))
                    </div>
                </div>
                <div class="content-bottom">
                    <div class="invitation-time">@(Invitation.CreatedTime.ToString("yyyy-MM-dd"))</div>
                    <div class="invitation-toolbar">
                        <div class="like-icon">
                            <MButton Large Icon OnClick="()=>ClickLike()">
                                <MIcon>@(_like ? "mdi-thumb-up" : "mdi-thumb-up-outline") </MIcon>
                            </MButton>
                            <div class="count">
                                @(Invitation.LikeCount)
                            </div>
                        </div>
                        <div class="comment-icon">
                            <MButton Large Icon>
                                <MIcon>mdi-comment-processing-outline</MIcon>
                            </MButton>
                            <div class="count">
                                @(Invitation.CommentCount)
                            </div>
                        </div>
                        <div class="collection-icon">
                            <MButton Large Icon OnClick="()=>ClickCollect()">
                                <MIcon>@(_collect ? "mdi-star" : "mdi-star-outline") </MIcon>
                            </MButton>
                            <div class="count">
                                @(Invitation.CollectionCount)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="invitation-comment">
            @foreach (var item in Comments)
            {
                <div class="comment-item">
                    <div class="comment-left">
                        <div class="user-headimg"></div>
                        <div class="user-name">@item.UserName</div>
                    </div>
                    <div class="comment-right">
                        <div class="comment-text">
                            @item.Content
                        </div>
                        <div class="comment-bottom">
                            <div class="comment-time">
                                @(TimeDifference.TimeDifferenceToNow(item.CreatedTime))
                            </div>
                            <div class="comment-toolbar"></div>
                        </div>
                    </div>
                </div>

            }
            <div class="text-center">
                <MPagination Class="@(pageLength>1?"":"d-none")"
                             @bind-Value="page"
                             Length="@(pageLength)"
                             TotalVisible="7">
                </MPagination>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }
    private InvitationDTOView Invitation { get; set; } = new();
    private List<CommentDTOView> Comments { get; set; } = new();
    private bool _like { get; set; } = false;
    private bool _collect { get; set; } = false;
    private int _page = 1;
    private int page
    {
        get => _page;
        set
        {
            _page = value;
            //此处因为set方法无法设置为异步，所以
            ChangeComments();
        }
    }
    private int size = 20;
    private int total = 0;
    private int pageLength = 0;


    protected async override Task OnInitializedAsync()
    {
        await SetInvitation();
        ChangeComments();

        var IsAuthenticated = await AuthService.IsAuthenticated();
        if(IsAuthenticated){
            await AddViews();
        }

    }
    //获取帖子
    private async Task SetInvitation()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<InvitationDTOView>>($"invitations/{id}");
            if (result.Successful == false || result.Data == null)
            {
                Navigation.NavigateTo("404");
                return;
            }

        }
        catch (Exception)
        {
            Navigation.NavigateTo("404");
            throw;
        }
    }
    //获取评论
    private async void ChangeComments()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<CommentDTOView>>>("comments/invitation?id=" + id + "&page=" + page + "&size=" + size);
            Comments = result.Data ?? new();
            total = result.Total;
            pageLength = total / size;
            if (total % size > 0)
            {
                pageLength++;
            }
            //此处因为是void方法，所以需要手动调用刷新
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
            throw;
        }


    }

    //点赞
    private void ClickLike()
    {
        _like = !_like;
    }
    //收藏
    private void ClickCollect()
    {
        _collect = !_collect;
    }

    //获取是否点赞
    private async Task SetIsHasLike()
    {
        var user = await AuthService.GetUser();
        var id = user.FindFirst("userId").Value;
        var result = await Http.GetFromJsonAsync<ApiResult<Likes>>("likes/");
    }
    //获取是否收藏
    private async Task SetIsHasCollection()
    {
        var user = await AuthService.GetUser();
        var id = user.FindFirst("userId").Value;
    }

    //增加浏览量
    private async Task AddViews()
    {
        try
        {
            var result = await Http.PutAsJsonAsync($"invitations/view?id={id}", id);
            var data = result.Content.ReadFromJsonAsync<ApiResult<Invitation>>().Result;
            if (!data.Successful)
            {
                await PopupService.AlertAsync(data.Msg, AlertTypes.Error);
            }
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
            throw;
        }
        
    }
    

}
