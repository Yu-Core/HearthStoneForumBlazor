@page "/invitation/{id:int}"
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IPopupService PopupService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JS


<div class="main @(Loading?"d-none":"")">
    <div class="invitation-wrap">
        <div class="breadcrumbs">
            你所在的位置：
            <MBreadcrumbs>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="">炉石论坛</MBreadcrumbsItem>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="@("invitations/" + Invitation.AreaId.ToString())">@Invitation.AreaName</MBreadcrumbsItem>
                <MBreadcrumbsItem Class="d-none d-md-block" Style="font-size:0.9rem" Disabled>@(Invitation.Title)</MBreadcrumbsItem>
                </MBreadcrumbs>
            </div>
            <div class="invitation-head">
                <h2>@(Invitation.Title)</h2>
        </div>
        <div class="invitation-content">
            <div class="content-left">
                <div class="user-headimg">
                    <MAvatar Color="primary" Class="w-100 h-100">
                        <SharedPortrait Src="@(Invitation.UserPortrait)"
                                        Text="@(Invitation.UserName)">
                        </SharedPortrait>
                    </MAvatar>
                </div>
                <div class="user-name">@(Invitation.UserName.GetCutOutByLength(10))</div>
            </div>
            <div class="content-right">
                <div class="content-text ">
                    <SharedQuillDisplay>
                        @((MarkupString)(Invitation.Content))
                    </SharedQuillDisplay>
                </div>
                <div class="content-bottom">
                    <div class="invitation-time">@(Invitation.CreatedTime.ToString("yyyy-MM-dd"))</div>
                    <div class="invitation-toolbar">
                        <div class="like-icon">
                            <MButton Large Icon OnClick="()=>OnClickLike()">
                                <MIcon>@(_like ? "mdi-thumb-up" : "mdi-thumb-up-outline") </MIcon>
                            </MButton>
                            <div class="count">
                                @(Invitation.LikeCount)
                            </div>
                        </div>
                        <div class="comment-icon">
                            <MButton Large Icon OnClick='()=>AnchorOnClickAsync("comment-send")'>
                                <MIcon>mdi-comment-processing-outline</MIcon>
                            </MButton>
                            <div class="count">
                                @(Invitation.CommentCount)
                            </div>
                        </div>
                        <div class="collection-icon">
                            <MButton Large Icon OnClick="()=>OnClickCollect()">
                                <MIcon>@(_collect ? "mdi-star" : "mdi-star-outline") </MIcon>
                            </MButton>
                            <div class="count">
                                @(Invitation.CollectionCount)
                            </div>
                        </div>
                        <div class="report-icon">
                            <MButton Large Icon OnClick="()=>OnClickReport()">
                                <MIcon>@(_report ? "mdi-alert" : "mdi-alert-outline") </MIcon>
                            </MButton>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="invitation-comment">
            <div class="comment-head">
                <h5>评论区</h5>
            </div>
            @foreach (var item in Comments)
            {
                <div class="comment-item">
                    <div class="comment-left">
                        <div class="user-headimg">
                            <MAvatar Color="primary" Class="w-100 h-100">
                                <SharedPortrait Src="@(item.UserPortrait)"
                                            Text="@(item.UserName)">
                                </SharedPortrait>
                            </MAvatar>

                        </div>
                        <div class="user-name">@(item.UserName.GetCutOutByLength(10))</div>
                    </div>
                    <div class="comment-right">
                        <div class="comment-text">
                            <SharedQuillDisplay>
                                @((MarkupString)(item.Content))
                            </SharedQuillDisplay>
                        </div>
                        <div class="comment-bottom">
                            <div class="comment-time">
                                @(TimeDifference.TimeDifferenceToNow(item.CreatedTime))
                            </div>
                            <AuthorizeView>
                                <Authorized>
                                    @if (item.UserId.ToString() == context.User.FindFirst("UserId").Value)
                                    {
                                        <div class="comment-delete">
                                            <MButton Text
                                             OnClick="()=>DeleteComment(item.Id)">
                                                删除
                                            </MButton>
                                        </div>
                                    }
                                </Authorized>
                            </AuthorizeView>

                            <div class="comment-toolbar">
                            </div>
                        </div>
                    </div>
                </div>

            }
            <div class="text-center">
                <MPagination Class="@(pageLength>1?"":"d-none")"
                             @bind-Value="page"
                             Length="@(pageLength)"
                             TotalVisible="7">
                </MPagination>
            </div>
            <AuthorizeView>
                <Authorized>
                    <div id="comment-send" class="comment-send">
                        <MForm EnableValidation Model="CommentAdd" OnValidSubmit="HandleOnValidSubmit">
                            <ChildContent Context="mformContext">
                                <h6>发布评论</h6>
                                <MEditor @ref="@_editor"
                                         @bind-Value="@(CommentAdd.Content)"
                                         ContentStyle="height:200px;"
                                         ToolbarClass="d-flex"
                                         Placeholder="请输入内容">
                                    <ToolbarContent>
                                        <span class="ql-formats">
                                            <button class="ql-bold"></button>
                                            <button class="ql-italic"></button>
                                            <button class="ql-underline"></button>
                                            <button class="ql-strike"></button>
                                            <select class="ql-color"></select>
                                            <select class="ql-background"></select>
                                            <button class="ql-clean"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <select class="ql-align">
                                                <option selected></option>
                                                <option value="center"></option>
                                                <option value="right"></option>
                                                <option value="justify"></option>
                                            </select>
                                        </span>

                                        <span class="ql-formats">
                                            <select class="ql-header">
                                                <option selected=""></option>
                                                <option value="1"></option>
                                                <option value="2"></option>
                                                <option value="3"></option>
                                                <option value="4"></option>
                                                <option value="5"></option>
                                            </select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-list" value="ordered"></button>
                                            <button class="ql-list" value="bullet"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-indent" value="-1"></button>
                                            <button class="ql-indent" value="+1"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-script" value="sub"></button>
                                            <button class="ql-script" value="super"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-blockquote"></button>
                                            <button class="ql-code-block"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-link"></button>
                                            <button class="ql-image"></button>
                                            <button class="ql-emoji"></button>
                                        </span>
                                    </ToolbarContent>
                                </MEditor>
                                <div class="d-flex justify-content-between mt-4">
                                    <MButton Color="primary"
                                             Loading="SendLoading"
                                             Disabled="SendLoading"
                                             Type="submit">
                                        发布
                                    </MButton>
                                    <MButton OnClick="()=>OnClickClearContent()">清空</MButton>
                                </div>
                            </ChildContent>
                        </MForm>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>

        <div class="scrolltools m-3 m-sm-5">
            <SharedScrollButton ScrollTarget="comment-send" Icon="mdi-pencil"></SharedScrollButton>
            <SharedScrollButton ScrollTarget="scrolling" Icon="mdi-arrow-up-thick"></SharedScrollButton>
        </div>
    </div>
</div>

<SharedLoad Value="Loading"></SharedLoad>

@code {
    [Parameter]
    public int id { get; set; }
    private InvitationDTOView Invitation { get; set; } = new();
    private List<CommentDTOView> Comments { get; set; } = new();
    private CommentDTOAdd CommentAdd { get; set; } = new();
    private MEditor? _editor;
    private bool Loading = true;
    private bool SendLoading = false;

    //private Likes Like { get; set; } = new();
    //private Collection Collection { get; set; } = new();
    private bool _like = false;
    private bool _collect = false;
    private bool _report = false;

    private int _page = 1;
    private int page
    {
        get => _page;
        set
        {
            _page = value;
            //此处因为set方法无法设置为异步，所以ChangeComments()返回值是void，而不是Task
            ChangeComments();
        }
    }
    private int size = 20;
    private int total = 0;
    private int pageLength = 0;


    protected async override Task OnInitializedAsync()
    {
        await SetInvitation();
        ChangeComments();

        var IsAuthenticated = await AuthService.IsAuthenticated();
        if (IsAuthenticated)
        {
            await AddViews();
            await SetHasLike();
            await SetHasCollection();
            await SetHasReport();
            await ChangeToolbarImage();
        }

        Loading = false;
    }
    //获取帖子
    private async Task SetInvitation()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<InvitationDTOView>>($"invitations/{id}");
            Invitation = result.Data ?? new();
            if (result.Successful == false || result.Data == null)
            {
                Navigation.NavigateTo("404");
                return;
            }

        }
        catch (Exception)
        {
            Navigation.NavigateTo("404");
            throw;
        }
    }


    //获取评论
    private async void ChangeComments()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<CommentDTOView>>>("comments/invitation?id=" + id + "&page=" + page + "&size=" + size);
            Comments = result.Data ?? new();
            total = result.Total;
            pageLength = total / size;
            if (total % size > 0)
            {
                pageLength++;
            }
            //此处因为是void方法，所以需要手动调用刷新
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
            throw;
        }


    }

    //获取是否点赞
    private async Task SetHasLike()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<Likes>>($"likes/search?invitationId={id}");
            if (result.Successful)
            {
                _like = true;
            }
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
            throw;
        }

    }
    //获取是否收藏
    private async Task SetHasCollection()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<Collection>>($"collections/search?invitationId={id}");
            if (result.Successful)
            {
                _collect = true;
            }
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
            throw;
        }
    }

    //获取是否举报
    private async Task SetHasReport()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<Report>>($"reports/search?invitationId={id}");
            _report = result.Successful;
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
            throw;
        }
    }


    //点赞或取消点赞
    private async Task OnClickLike()
    {
        var IsAuthenticated = await AuthService.IsAuthenticated();
        if (!IsAuthenticated)
        {
            var confirm = await PopupService.ConfirmAsync("提示", "检测到您尚未登录,是否登录？");

            if (confirm)
            {
                await LocalStorage.RemoveItemAsync("oldUrl");
                await LocalStorage.SetItemAsync("oldUrl", Navigation.Uri);
                Navigation.NavigateTo("login");
            }
        }
        else
        {
            try
            {

                if (_like)
                {
                    var resultDelete = await Http.DeleteAsync($"likes/{id}");
                    var data = resultDelete.Content.ReadFromJsonAsync<ApiResult<Likes>>().Result;
                    if (data.Successful)
                    {
                        Invitation.LikeCount--;
                        await PopupService.AlertAsync("已取消点赞");
                    }
                    else
                    {
                        await PopupService.AlertAsync("取消点赞失败", AlertTypes.Error);
                    }
                }
                else
                {
                    var resultPost = await Http.PostAsJsonAsync($"likes?invitationId={id}", id);
                    var data = resultPost.Content.ReadFromJsonAsync<ApiResult<Likes>>().Result;
                    if (data.Successful)
                    {
                        Invitation.LikeCount++;
                        await PopupService.AlertAsync("点赞成功");
                    }
                    else
                    {
                        await PopupService.AlertAsync("点赞失败", AlertTypes.Error);
                    }
                }

            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                _like = !_like;
            }
        }


    }
    //收藏或取消收藏
    private async Task OnClickCollect()
    {
        var IsAuthenticated = await AuthService.IsAuthenticated();
        if (!IsAuthenticated)
        {
            var confirm = await PopupService.ConfirmAsync("提示", "检测到您尚未登录,是否登录？");

            if (confirm)
            {
                await LocalStorage.RemoveItemAsync("oldUrl");
                await LocalStorage.SetItemAsync("oldUrl", Navigation.Uri);
                Navigation.NavigateTo("login");
            }
        }
        else
        {
            try
            {

                if (_collect)
                {
                    var resultDelete = await Http.DeleteAsync($"collections/{id}");
                    var data = resultDelete.Content.ReadFromJsonAsync<ApiResult<Collection>>().Result;
                    if (data.Successful)
                    {
                        Invitation.CollectionCount--;
                        await PopupService.AlertAsync("已取消收藏");
                    }
                    else
                    {
                        await PopupService.AlertAsync("取消收藏失败", AlertTypes.Error);
                    }
                }
                else
                {
                    var resultPost = await Http.PostAsJsonAsync($"collections?invitationId={id}", id);
                    var data = resultPost.Content.ReadFromJsonAsync<ApiResult<Collection>>().Result;
                    if (data.Successful)
                    {
                        Invitation.CollectionCount++;
                        await PopupService.AlertAsync("收藏成功");
                    }
                    else
                    {
                        await PopupService.AlertAsync("收藏失败", AlertTypes.Error);
                    }
                }

            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                _collect = !_collect;
            }
        }

    }

    //举报
    private async Task OnClickReport()
    {
        var IsAuthenticated = await AuthService.IsAuthenticated();
        if (!IsAuthenticated)
        {
            var confirm = await PopupService.ConfirmAsync("提示", "检测到您尚未登录,是否登录？");

            if (confirm)
            {
                await LocalStorage.RemoveItemAsync("oldUrl");
                await LocalStorage.SetItemAsync("oldUrl", Navigation.Uri);
                Navigation.NavigateTo("login");
            }
        }
        else
        {
            try
            {
                if (_report)
                {
                    await PopupService.AlertAsync("已经举报过了");
                }
                else
                {
                    var input = await PopupService.PromptAsync(param =>
                    {
                        param.Title = "举报";
                        param.Content = "请详细输入举报理由";
                    });

                    if (!string.IsNullOrWhiteSpace(input))
                    {
                        var report = new ReportDTOAdd()
                            {
                                InvitationId = id,
                                Content = input
                            };
                        var resultPost = await Http.PostAsJsonAsync("reports", report);
                        var data = resultPost.Content.ReadFromJsonAsync<ApiResult<Report>>().Result;
                        if (data.Successful)
                        {
                            _report = true;
                            await PopupService.AlertAsync("举报成功");
                        }
                        else
                        {
                            await PopupService.AlertAsync("举报失败", AlertTypes.Error);
                        }
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

    }

    //增加浏览量
    private async Task AddViews()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<ViewRecord>>($"viewRecords/search?invitationId={id}");
            if(!result.Successful)
            {
                var resultPost = await Http.PostAsJsonAsync($"viewRecords?invitationId={id}", id);
                var data = resultPost.Content.ReadFromJsonAsync<ApiResult<Collection>>().Result;
            }
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
            throw;
        }

    }

    //发送评论
    private async Task HandleOnValidSubmit()
    {
        SendLoading = true;

        var text = await _editor.GetTextAsync();
        if (!string.IsNullOrWhiteSpace(text))
        {
            CommentAdd.InvitationId = id;
            try
            {
                var result = await Http.PostAsJsonAsync<CommentDTOAdd>("comments", CommentAdd);
                var data = result.Content.ReadFromJsonAsync<ApiResult<Comment>>().Result;
                if (data.Successful)
                {
                    page = 1;
                    CommentAdd = new();
                    Invitation.CommentCount++;
                    StateHasChanged();
                    await PopupService.AlertAsync("发布成功");
                    Navigation.NavigateTo(Navigation.Uri);
                }
                else
                {
                    await PopupService.AlertAsync(data.Msg, AlertTypes.Error);
                }
            }
            catch (Exception ex)
            {
                await PopupService.AlertAsync(ex);
            }
        }

        SendLoading = false;
    }
    //清除评论内容
    private void OnClickClearContent()
    {
        CommentAdd = new();
    }

    //删除评论
    private async Task DeleteComment(int id)
    {
        var confirm = await PopupService.ConfirmAsync("提示", "是否确定删除？");
        if (confirm)
        {

            var result = await Http.DeleteAsync($"comments/{id}");
            var data = result.Content.ReadFromJsonAsync<ApiResult<Comment>>().Result;
            if (!data.Successful)
            {
                await PopupService.AlertAsync("删除失败", AlertTypes.Error);
            }
            else
            {
                var removeObj = Comments.FirstOrDefault(it => it.Id == id);
                Comments.Remove(removeObj);

                //更新总数，判断当前分页是否为空并更换分页

                if (Comments.Count == 0 && page > 1)
                {
                    page -= 1;
                }
                Invitation.CommentCount--;
                ChangeComments();
                await PopupService.AlertAsync("删除成功");
            }

        }
    }

    //滚动到指定元素(调用js)
    private async Task AnchorOnClickAsync(string elementId)
    {
        if (!string.IsNullOrEmpty(elementId))
        {
            // If the target ID has been specified, we know this is an anchor link that we need to scroll
            // to, so we call the JavaScript method to take care of this for us.
            await JS.InvokeVoidAsync("anchorLink.scrollIntoView", elementId);
        }
    }

    private async Task ChangeToolbarImage()
    {
        await JS.InvokeVoidAsync("ChangeToolbarImage", _editor.ContentRef);
    }
}
