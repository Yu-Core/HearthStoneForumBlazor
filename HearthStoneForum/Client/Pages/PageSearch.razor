@page "/search"
@inject HttpClient Http
@inject NavigationManager Navigation
@implements IDisposable
@inject SearchState SearchState
@inject MainLayoutState LayoutState

<div class="main">
    <div class="search-wrap">
        <div class="breadcrumbs">
            你所在的位置：
            <MBreadcrumbs>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="">炉石论坛</MBreadcrumbsItem>
                <MBreadcrumbsItem Style="font-size:0.9rem" Disabled>搜索结果</MBreadcrumbsItem>
            </MBreadcrumbs>
        </div>
        <div class="search-head">
            <h2><span style="color:#757575;">@(SearchText.GetCutOutByLength(20))</span>的搜索结果</h2>
        </div>
        <div class="@(NotFound?"d-none":"")">
            <MButton Outlined="@(searchMode !=SearchMode.Notices)"
                     Dark="@(searchMode ==SearchMode.Notices)"
                     Color="indigo"
                     Rounded
                     OnClick="()=>ChangeSearchMode(SearchMode.Notices)">
                公告
            </MButton>
            <MButton Outlined="@(searchMode !=SearchMode.Invitations)"
                     Dark="@(searchMode ==SearchMode.Invitations)"
                     Color="indigo"
                     Rounded
                     OnClick="()=>ChangeSearchMode(SearchMode.Invitations)">
                帖子
            </MButton>
        </div>
        <div class="search-content @(NotFound?"d-none":"")">
            @if (searchMode == SearchMode.Notices)
            {
                <MVirtualScroll Height="300"
                            Items="Notices"
                            @ref="_vsNotices">
                    <ItemContent>
                        <a href="@("noticeInfo/"+context.Id)" class="rounded-lg">
                            <div class="search-row rounded-lg">
                                <div class="search-title">
                                    @context.Title
                                </div>
                                <div class="search-time">
                                    @context.CreatedTime.ToString("d")
                                </div>
                            </div>
                        </a>
                    </ItemContent>
                    <FooterContent>
                        <MInfiniteScroll HasMore="@_hasMoreNotices"
                                     OnLoadMore="@LoadMoreNotices"
                                     Parent="@_vsNotices?.Ref">
                        </MInfiniteScroll>
                    </FooterContent>
                </MVirtualScroll>
            }
            @if (searchMode == SearchMode.Invitations)
            {
                <MVirtualScroll Height="300"
                            Items="Invitations"
                            @ref="_vsInvitations">
                    <ItemContent>
                        <a href="@("invitationInfo/"+context.Id)" class="rounded-lg">
                            <div class="search-row rounded-lg">
                                <div class="search-title">
                                    @context.Title
                                </div>
                                <div class="search-time">
                                    @context.CreatedTime.ToString("d")
                                </div>
                            </div>
                        </a>
                    </ItemContent>
                    <FooterContent>
                        <MInfiniteScroll HasMore="@_hasMoreInvitations"
                                     OnLoadMore="@LoadMoreInvitations"
                                     Parent="@_vsInvitations?.Ref">
                        </MInfiniteScroll>
                    </FooterContent>
                </MVirtualScroll>
            }


        </div>
        <div class="text-center @(NotFound?"":"d-none")">
            <h4>搜索结果为空</h4>
        </div>
        <SharedScrollButton Float ScrollTarget="scrolling" Icon="mdi-arrow-up-thick"></SharedScrollButton>
    </div>
</div>


@code {
    private string? SearchText
    {
        get
        {
            return SearchState.SearchText;
        }
    }
    private SearchMode searchMode { get; set; } = SearchMode.Notices;
    private List<Notice> Notices { get; set; } = new();
    private List<Invitation> Invitations { get; set; } = new();
    private MVirtualScroll<Notice>? _vsNotices;
    private MVirtualScroll<Invitation>? _vsInvitations;
    private bool NotFound;

    private bool _hasMoreInvitations;
    private bool _hasMoreNotices;


    private int pageNotices = 1;
    private int sizeNotices = 10;
    private int pageInvitations = 1;
    private int sizeInvitations = 10;
    private bool firstLoadNotices = true;
    private bool firstLoadInvitations = true;

    private enum SearchMode
    {
        Notices, Invitations
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(SearchText))
        {
            NotFound = true;
        }
        SearchState.OnChange += InitializedSearch;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!NotFound)
            {
                await LoadMoreNotices();
                //await LoadMoreInvitations();
                StateHasChanged();
            }

        }
    }

    public void Dispose()
    {
        SearchState.OnChange -= InitializedSearch;
    }

    private async Task<List<Notice>> GetNotices()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<Notice>>>($"notices/search?searchText={SearchText}&page={pageNotices}&size={sizeNotices}");
            if (!result.Successful)
            {
                return new();
            }
            await Task.Delay(1000);
            pageNotices++;
            if (firstLoadNotices)
            {
                firstLoadNotices = false;
            }
            return result.Data ?? new();
        }
        catch (Exception)
        {
            Navigation.NavigateTo("404");
            throw;
        }
    }
    private async Task<List<Invitation>> GetInvitations()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<Invitation>>>($"invitations/search?searchText={SearchText}&page={pageInvitations}&size={sizeInvitations}");
            if (!result.Successful)
            {
                return new();
            }
            await Task.Delay(1000);
            pageInvitations++;
            if (firstLoadInvitations)
            {
                firstLoadInvitations = false;
            }
            return result.Data ?? new();
        }
        catch (Exception)
        {
            Navigation.NavigateTo("404");
            throw;
        }
    }


    //加载更多公告
    private async Task LoadMoreNotices()
    {
        var data = await GetNotices();
        Notices.AddRange(data);
        _hasMoreNotices = data.Count > 0;
    }
    //加载更多帖子
    private async Task LoadMoreInvitations()
    {
        var data = await GetInvitations();
        Invitations.AddRange(data);
        _hasMoreInvitations = data.Count > 0;

    }
    //改变搜索类型
    private async Task ChangeSearchMode(SearchMode mode)
    {
        searchMode = mode;
        if (firstLoadInvitations)
        {
            if (mode == SearchMode.Invitations)
            {
                await LoadMoreInvitations();
            }
        }
        if (firstLoadNotices)
        {
            if (mode == SearchMode.Notices)
            {
                await LoadMoreNotices();
            }
        }

    }

    private async void InitializedSearch()
    {
        
        Notices = new();
        Invitations= new();
        NotFound = false;



        pageNotices = 1;
        sizeNotices = 10;
        pageInvitations = 1;
        sizeInvitations = 10;
        firstLoadNotices = true;
        firstLoadInvitations = true;

        searchMode = SearchMode.Notices;

        if (string.IsNullOrWhiteSpace(SearchText))
        {
            NotFound = true;
        }
        if (!NotFound)
        {
            await LoadMoreNotices();
            await LoadMoreNotices();
        }
        StateHasChanged();
    }
}
