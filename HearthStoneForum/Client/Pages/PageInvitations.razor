@page "/invitations/{id:int}"
@inject HttpClient Http
@inject NavigationManager navigation
@inject IPopupService PopupService
@inject IAuthService AuthService
@inject IJSRuntime JS

<div class="main @(Loading?"d-none":"")">
    <div class="invitation-wrap">
        <div class="breadcrumbs">
            你所在的位置：
            <MBreadcrumbs>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="" Text="炉石论坛"></MBreadcrumbsItem>
                <MBreadcrumbsItem Style="font-size:0.9rem" Disabled Text="@(Area.Name)"></MBreadcrumbsItem>
            </MBreadcrumbs>
        </div>
        <div class="invitation-head">
            <h2>@(Area.Name)</h2>
        </div>

        <div class="invitation-content">
            <MSimpleTable>
                <thead>
                    <tr class="d-none d-sm-table-row">
                        <th class="invitation-title">标题</th>
                        <th class="invitation-user">作者</th>
                        <th class="invitation-views">浏览</th>
                        <th class="invitation-comment">回复</th>
                        <th class="invitation-time">发表时间</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Invitations)
                    {
                        <tr @onclick="()=>ClickInvitation(item.Id)">
                            <td class="invitation-title">@(item.Title)</td>
                            <td class="invitation-user">@(item.UserName)</td>
                            <td class="invitation-views">@(item.Views)</td>
                            <td class="invitation-comment">@(item.CommentCount)</td>
                            <td class="invitation-time">@(item.CreatedTime.ToString("yyyy-MM-dd HH:mm"))</td>
                        </tr>
                    }
                </tbody>
            </MSimpleTable>
        </div>


        <div class="page">
            <MPagination Class="@(pageLength>1?"":"d-none")"
                         @bind-Value="page"
                         Length="@(pageLength)"
                         TotalVisible="7">
            </MPagination>
        </div>

        <AuthorizeView>
            <Authorized>
                <div id="invitation-send" class="invitation-send">
                    <MForm EnableValidation Model="InvitationAdd" OnValidSubmit="HandleOnValidSubmit">
                        <ChildContent Context="mformContext">
                            <h5>发布新贴</h5>
                            <MTextField @bind-Value="@(InvitationAdd.Title)"
                                        Class="mt-5"
                                        Outlined
                                        Dense
                                        Placeholder="请输入标题">
                            </MTextField>
                            <MEditor @ref="@_editor"
                                     @bind-Value="@(InvitationAdd.Content)"
                                     ContentStyle="height:200px;"
                                     ToolbarClass="d-flex"
                                     Placeholder="请输入内容">
                                <ToolbarContent>
                                    <span class="ql-formats">
                                        <button class="ql-bold"></button>
                                        <button class="ql-italic"></button>
                                        <button class="ql-underline"></button>
                                        <button class="ql-strike"></button>
                                        <select class="ql-color"></select>
                                        <select class="ql-background"></select>
                                        <button class="ql-clean"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <select class="ql-align">
                                            <option selected></option>
                                            <option value="center"></option>
                                            <option value="right"></option>
                                            <option value="justify"></option>
                                        </select>
                                    </span>
                                    
                                    <span class="ql-formats">
                                        <select class="ql-header">
                                            <option selected=""></option>
                                            <option value="1"></option>
                                            <option value="2"></option>
                                            <option value="3"></option>
                                            <option value="4"></option>
                                            <option value="5"></option>
                                        </select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-list" value="ordered"></button>
                                        <button class="ql-list" value="bullet"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-indent" value="-1"></button>
                                        <button class="ql-indent" value="+1"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-script" value="sub"></button>
                                        <button class="ql-script" value="super"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-blockquote"></button>
                                        <button class="ql-code-block"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-link"></button>
                                        <button class="ql-image"></button>
                                        <button class="ql-emoji"></button>
                                    </span>
                                </ToolbarContent>
                            </MEditor>
                            <div class="d-flex justify-content-between mt-4">
                                <MButton Color="primary"
                                         Loading="SendLoading"
                                         Disabled="SendLoading"
                                         Type="submit">
                                    发布
                                </MButton>
                                <MButton OnClick="()=>OnClickClearContent()">清空</MButton>
                            </div>
                        </ChildContent>
                    </MForm>
                </div>
            </Authorized>
        </AuthorizeView>

        <div class="scrolltools m-3 m-sm-5">
            <SharedScrollButton ScrollTarget="invitation-send" Icon="mdi-pencil"></SharedScrollButton>
            <SharedScrollButton ScrollTarget="scrolling" Icon="mdi-arrow-up-thick"></SharedScrollButton>
        </div>


    </div>
</div>

<SharedLoad Value="Loading"></SharedLoad>

@code {
    [Parameter]
    public int id { get; set; }

    private AreaDTOView Area { get; set; } = new AreaDTOView();
    private List<InvitationDTOView> Invitations { get; set; } = new();
    private InvitationDTOAddPlus InvitationAdd { get; set; } = new();
    private MEditor? _editor;
    private bool Loading = true;
    private bool SendLoading = false;

    private int _page = 1;
    private int page
    {
        get => _page;
        set
        {
            _page = value;
            ChangeInvitations();
        }
    }

    private int size = 20;
    private int total = 0;
    private int pageLength = 0;

    


    protected override async Task OnInitializedAsync()
    {
        await SetArea();

        ChangeInvitations();

        var IsAuthenticated = await AuthService.IsAuthenticated();
        if (IsAuthenticated)
        {
            await ChangeToolbarImage();
        }

        Loading = false;

    }


    private async Task SetArea()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<AreaDTOView>>($"areas/{id}");
            if (result.Successful == false || result.Data == null)
            {
                navigation.NavigateTo("404");
                return;
            }
            Area = result.Data ?? new();
        }
        catch (Exception)
        {

            navigation.NavigateTo("404");
        }
    }

    private async void ChangeInvitations()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<InvitationDTOView>>>($"invitations/area?id={id}&page={page}&size={size}");
            Invitations = result.Data ?? new();
            total = result.Total;
            pageLength = total / size;
            if (total % size > 0)
            {
                pageLength++;
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            navigation.NavigateTo("404");
        }
    }
    private void ClickInvitation(int id)
    {
        navigation.NavigateTo($"invitation/{id}");
    }
    //发送帖子
    private async Task HandleOnValidSubmit()
    {
        SendLoading = true;
        
        InvitationDTOAdd InvitationAdd = this.InvitationAdd;
        InvitationAdd.AreaId = id;

        try
        {
            var result = await Http.PostAsJsonAsync<InvitationDTOAdd>("invitations", InvitationAdd);
            var data = result.Content.ReadFromJsonAsync<ApiResult<Invitation>>().Result;
            if (data.Successful)
            {
                page = 1;
                this.InvitationAdd = new();
                StateHasChanged();
                await PopupService.AlertAsync("发布成功");
                navigation.NavigateTo(navigation.Uri);
            }
            else
            {
                await PopupService.AlertAsync(data.Msg, AlertTypes.Error);
            }
        }
        catch (Exception ex)
        {
            await PopupService.AlertAsync(ex);
        }

        SendLoading = false;

    }
    //清除发帖内容
    private async void OnClickClearContent()
    {
        InvitationAdd = new();
    }

    //执行JS中覆盖MEditor工具栏的图片上传的点击
    private async Task ChangeToolbarImage()
    {
        await JS.InvokeVoidAsync("ChangeToolbarImage", _editor.ContentRef);
    }
}
