@page "/invitations/{id:int}"
@inject HttpClient Http
@inject NavigationManager navigation

<div class="main">
    <div class="invitation-wrap">
        <div class="breadcrumbs">
            你所在的位置：<MBreadcrumbs>
                <MBreadcrumbsItem Style="font-size:0.9rem" Href="">炉石论坛</MBreadcrumbsItem>
                <MBreadcrumbsItem Style="font-size:0.9rem" Disabled>@(Area.Name)</MBreadcrumbsItem>
                </MBreadcrumbs>
            </div>
            <div class="invitation-head">
                <h2>@(Area.Name)</h2>
        </div>
        <div class="invitation-content">
            <div class="list-head">
                <div class="invitation-title">标题</div>
                <div class="invitation-user">作者</div>
                <div class="invitation-views">浏览量</div>
                <div class="invitation-comment">回复</div>
                <div class="invitation-time">发表时间</div>
            </div>
            @foreach (var item in Invitations)
            {
                <a>
                    <div class="list-row">
                        <div class="invitation-title">@(item.Title)</div>
                        <div class="invitation-user">@item.UserName</div>
                        <div class="invitation-views">@item.Views</div>
                        <div class="invitation-comment">@item.CommentCount</div>
                        <div class="invitation-time">@(item.CreatedTime.ToString("yyyy-MM-dd HH:mm"))</div>
                    </div>
                </a>
            }
        </div>
        <div class="page">
            <MPagination Class="@(pageLength>1?"":"d-none")" @bind-Value="page" Length="@(pageLength)"></MPagination>
        </div>
    </div>
</div>
@code {
    private AreaDTOView Area = new AreaDTOView();
    private List<InvitationDTOView> Invitations = new();
    [Parameter]
    public int id { get; set; }
    private int _page = 1;
    private int page
    {
        get => _page;
        set
        {
            _page = value;
            ChangeInvitations();
        }
    }

    private int size = 2;
    private int total = 0;
    private int pageLength = 0;


    protected override async Task OnInitializedAsync()
    {
        await SetArea();

        ChangeInvitations();
    }

    private async Task SetArea(){
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<AreaDTOView>>($"areas/{id}");
            Area = result.Data ?? new();
        }
        catch (Exception)
        {

            navigation.NavigateTo("404");
        }
    }

    private async void ChangeInvitations()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<InvitationDTOView>>>($"invitations/area?id={id}&page={page}&size={size}");
            Invitations = result.Data ?? new();
            total = result.Total;
            pageLength = total / size;
            if (total % size > 0)
            {
                pageLength++;
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            navigation.NavigateTo("404");
        }
    }
}
