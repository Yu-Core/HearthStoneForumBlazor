@inject IPopupService PopupService
@inject NavigationManager navigation
@inject HttpClient Http

<div class="invitation-content">
    @foreach (var item in Invitations)
    {
        <button @onclick="()=>NavigateToInvitation(item.Id)" class="rounded-lg">
            <div class="invitation-row rounded-lg">
                <div class="invitation-title">
                    @item.Title
                </div>
                <div class="invitation-tool">
                    <MButton Icon StopPropagation OnClick="()=>DeleteInvitation(item.Id,Invitations)">
                        <MIcon>mdi-delete</MIcon>
                    </MButton>
                </div>
            </div>
        </button>
    }
</div>
<div class="text-center">
    <MPagination Class="@(pageLength>1?"":"d-none")" @bind-Value="page" Length="@(pageLength)"></MPagination>
</div>

@code {
    [Parameter]
    public EventCallback<DeleteState> OnDelete { get; set; }
    [Parameter]
    public EventCallback<GetInvitationsState> OnSetInvitations { get; set; }

    private List<Invitation> Invitations { get; set; } = new();
    private int _page = 1;
    private int page
    {
        get => _page;
        set
        {
            _page = value;
            ChangeInvitations();
        }
    }
    private int size = 10;
    private int total = 0;
    private int pageLength = 0;



    protected override Task OnInitializedAsync()
    {
        ChangeInvitations();
        return base.OnInitializedAsync();
    }

    private async void ChangeInvitations()
    {
        if (!OnSetInvitations.HasDelegate) return;
        try
        {
            var arg = new GetInvitationsState()
                {
                    Success = false,
                    page = page,
                    size = size
                };

            await OnSetInvitations.InvokeAsync(arg);
            if(!arg.Success)
            {
                return;
            }
            Invitations = arg.Data.Data ?? new();
            total = arg.Data.Total;
            pageLength = total / size;
            if (total % size > 0)
            {
                pageLength++;
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            navigation.NavigateTo("404");
        }
    }

    private async Task DeleteInvitation(int id, List<Invitation> invitations)
    {
        if (!OnDelete.HasDelegate) return;

        var confirm = await PopupService.ConfirmAsync("提示", "是否确定删除？");
        if (confirm)
        {
            try
            {
                var arg = new DeleteState()
                    {
                        Id = id,
                        Success = false
                    };
                await OnDelete.InvokeAsync(arg);

                if(!arg.Success){
                    await PopupService.AlertAsync("删除失败", AlertTypes.Error);
                }
                else{
                    var removeObj = invitations.FirstOrDefault(it => it.Id == id);
                    if (removeObj != null)
                    {
                        invitations.Remove(removeObj);
                    }

                    //更新总数，判断当前分页是否为空并更换分页

                    if (invitations.Count == 0 && page > 1)
                    {
                        page -= 1;
                    }
                    ChangeInvitations();
                    await PopupService.AlertAsync("删除成功");
                }
                
                
            }
            catch (Exception ex)
            {
                await PopupService.AlertAsync(ex);
                throw;
            }
            

        }

    }

    private void NavigateToInvitation(int id)
    {
        navigation.NavigateTo($"invitation/{id}");
    }
}
