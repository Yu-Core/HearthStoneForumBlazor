@inject IPopupService PopupService
@inject NavigationManager navigation
@inject HttpClient Http

<div class="invitation-content">
    @foreach (var item in Invitations)
    {
        <button @onclick="()=>NavigateToInvitation(item.Id)" class="rounded-lg">
            <div class="invitation-row rounded-lg">
                <div class="invitation-title">
                    @item.Title
                </div>
                <div class="invitation-tool">
                    <MButton Icon StopPropagation OnClick="()=>DeleteInvitation(item.Id,Invitations)">
                        <MIcon>mdi-delete</MIcon>
                    </MButton>
                </div>
            </div>
        </button>
    }
</div>
<div class="text-center">
    <MPagination Class="@(pageLength>1?"":"d-none")" @bind-Value="page" Length="@(pageLength)"></MPagination>
</div>

@code {
    [Parameter]
    public string? GetUrl { get; set; } = string.Empty;

    private List<Invitation> Invitations { get; set; } = new();
    private int _page = 1;
    private int page
    {
        get => _page;
        set
        {
            _page = value;
            ChangeInvitations();
        }
    }
    private int size = 10;
    private int total = 0;
    private int pageLength = 0;

    protected override Task OnInitializedAsync()
    {
        ChangeInvitations();
        return base.OnInitializedAsync();
    }

    private async void ChangeInvitations()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiResult<List<Invitation>>>($"{GetUrl}page={page}&size={size}");
            Invitations = result.Data ?? new();
            total = result.Total;
            pageLength = total / size;
            if (total % size > 0)
            {
                pageLength++;
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            navigation.NavigateTo("404");
        }
    }

    private async void DeleteInvitation(int id, List<Invitation> invitations)
    {

        var confirm = await PopupService.ConfirmAsync("提示", "是否确定删除？");
        if (confirm)
        {

            var result = await Http.DeleteAsync($"invitations/{id}");
            var data = result.Content.ReadFromJsonAsync<ApiResult<Invitation>>().Result;
            if (!data.Successful)
            {
                await PopupService.AlertAsync("删除失败", AlertTypes.Error);
            }
            else
            {
                var removeObj = invitations.FirstOrDefault(it => it.Id == id);
                invitations.Remove(removeObj);

                //更新总数，判断当前分页是否为空并更换分页

                if (invitations.Count == 0 && page > 1)
                {
                    page -= 1;
                }
                ChangeInvitations();
                await PopupService.AlertAsync("删除成功");
            }

        }

    }

    private void NavigateToInvitation(int id)
    {
        navigation.NavigateTo($"invitation/{id}");
    }
}
