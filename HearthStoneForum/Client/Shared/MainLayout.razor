@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject HttpClient Http
<MApp AlertParameters="param => { param.Centered = true; param.Rounded = true;}"
      >
    <MAppBar App ElevateOnScroll ScrollTarget="#scrolling">
        <div class="d-flex d-md-none">
            <MAppBarNavIcon @onclick="() => drawer = true"></MAppBarNavIcon>
        </div>
        <MListItemGroup @bind-Value="selectItem" Class="w-100 d-none d-md-flex">
            <div class="navigation-list">
                @foreach (var item in navigationButtons)
                {
                    <MListItem Class="navigation-btn flex-grow-1 d-flex justify-content-center" Href="@item.Href">
                        @item.Title
                    </MListItem>
                }
            </div>
        </MListItemGroup>
        <MSpacer Class="d-flex d-md-none"></MSpacer>
        <MTextField Class="navigation-search" Dense TValue="string" HideDetails="@("false")" Solo Placeholder="搜索" AppendIcon="mdi-magnify"></MTextField>
        <MSpacer Class="d-flex d-md-none"></MSpacer>

        <AuthorizeView>
            <Authorized>
                <div>
                    <MButton Class="d-sm-none" Icon @onclick="() => drawerRight = true">
                        <MIcon Large>mdi-account-circle</MIcon>
                    </MButton>
                    <MButton Class="d-none d-sm-block text-capitalize ms-3 light-blue--text text--darken-3"
                             Text
                             @onclick="() => drawerRight = true">
                        @(context.User.FindFirst("Name").Value.StringCutOutByLength(10))
                    </MButton>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="ms-2">
                    <MButton Href="login" Text>
                        登录
                    </MButton>
                </div>
            </NotAuthorized>
        </AuthorizeView>


    </MAppBar>

    <MNavigationDrawer App @bind-Value="drawer" Temporary>
        <MList>
            <MListItemGroup @bind-Value="selectItem">
                @foreach (var item in navigationButtons)
                {
                    <MListItem Href="@item.Href">
                        <MListItemIcon>
                            <MIcon>@item.Icon</MIcon>
                        </MListItemIcon>
                        <MListItemTitle>@item.Title</MListItemTitle>
                    </MListItem>
                }
            </MListItemGroup>
        </MList>
    </MNavigationDrawer>

    <AuthorizeView>
        <Authorized>
            <MNavigationDrawer App @bind-Value="drawerRight" Right Temporary>
                <MListItem>
                    <MListItemAvatar Color="primary" Size="100">
                        @if (PortraitUrl == string.Empty)
                        {
                            <h2 class="white--text m-0">@(context.User.FindFirst("Name").Value.Substring(0,1).ToUpper())</h2>
                        }
                        else{
                            <MImage Src="@(PortraitUrl)"></MImage>
                        }                       
                    </MListItemAvatar>

                    <MListItemContent>
                        <MListItemTitle>
                            <h6>@(context.User.FindFirst("Name").Value)</h6>
                        </MListItemTitle>
                    </MListItemContent>
                </MListItem>
                <MList Dense>
                    @foreach (var item in userButtons)
                    {
                        <MListItem Link>
                            <MListItemIcon>
                                <MIcon>@(item.Icon)</MIcon>
                                </MListItemIcon>

                                <MListItemContent>
                                    <MListItemTitle>@(item.Title)</MListItemTitle>
                                </MListItemContent>
                            </MListItem>
                    }

                    <MListItem Link OnClick="()=>Logout()">
                        <MListItemIcon>
                            <MIcon>mdi-logout-variant</MIcon>
                        </MListItemIcon>

                        <MListItemContent>
                            <MListItemTitle>退出登录</MListItemTitle>
                        </MListItemContent>
                    </MListItem>
                </MList>
            </MNavigationDrawer>
        </Authorized>
    </AuthorizeView>


    <!-- 根据应用组件来调整你的内容 -->
    <MMain Id="scrolling" Class="overflow-y-auto" Style="background-color:#F7F8F9;color:#282828;">
        <!-- 给应用提供合适的间距 -->
        <MContainer Fluid>
            @Body
        </MContainer>
    </MMain>

    <MSheet Class="d-flex flex-column grey lighten-3" Style="font-size:xx-small;color:#757575;">
        <div class="footer-top d-flex justify-content-center align-items-center">
            <div class="footer-img-wrap ">
                <div class="footer-img elevation-6"></div>
            </div>
            <div class="footer-copyright">
                <p>©2021 xxxx有限公司版权所有 由xxxxx网络科技发展有限公司运营 著作权侵权</p>
                <p>文网进字[2021]001号 沪网文〔2021〕1234-567号 增值电信业务经营许可证编号：沪B2－20210001</p>
                <p>沪ICP备：沪B2－20080012 法律文件</p>
                <p>新出审字[2013]1510号 文化部网络游戏举报与联系邮箱：wlyxjb@gmail.com 《互联网文化管理暂行规定》</p>
                <p>互联网违法和不良信息举报电话：0571-28090163 沪公网安备 31011502022167号</p>
            </div>
        </div>
        <div class="d-flex flex-column align-items-center">
            <p>积极健康的游戏心态是健康游戏的开端，本游戏故事情节设置紧凑，请您合理控制游戏时间，避免沉溺游戏影响生活，注意自我保护，防范网络陷阱。</p>
            <p>健康游戏忠告：抵制不良游戏，拒绝盗版游戏。注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身。合理安排时间，享受健康生活。</p>
        </div>

    </MSheet>

</MApp>

@code {
    private bool drawer;
    private bool drawerRight;
    private string? PortraitUrl { get; set; } = string.Empty;
    StringNumber selectItem = 0;
    private class NavigationButton
    {
        public string? Title { set; get; }
        public string? Icon { set; get; }
        public string? Href { set; get; }
    }
    private List<NavigationButton> navigationButtons = new List<NavigationButton>()
    {
        new NavigationButton(){Title="首页",Icon="mdi-home",Href=""},
        new NavigationButton(){Title="公告",Icon="mdi-bulletin-board",Href="notices"},
        new NavigationButton(){Title="排名",Icon="mdi-format-list-numbered",Href="ranks"},
        new NavigationButton(){Title="下载",Icon="mdi-download",Href="download"},
        new NavigationButton(){Title="指南",Icon="mdi-new-box",Href="guide"}
    };
    private List<NavigationButton> userButtons = new List<NavigationButton>()
    {
        new NavigationButton(){Title="个人中心",Icon="mdi-home",Href=""},
        new NavigationButton(){Title="每日抽奖",Icon="mdi-gift",Href=""}
    };
    private async Task Logout()
    {
        await AuthService.Logout();
    }

    protected override async Task OnInitializedAsync()
    {
        var IsAuthenticated = await AuthService.IsAuthenticated();
        if(IsAuthenticated){
            var user = await AuthService.GetUser();
            var id = user.FindFirst("userId").Value;
            PortraitUrl = (await Http.GetFromJsonAsync<ApiResult<string>>("userInfos/portrait?userId=" + id)).Data ?? string.Empty;
        }
    }

    
}

